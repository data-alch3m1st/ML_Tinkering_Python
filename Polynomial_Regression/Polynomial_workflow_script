# Good Workflow for Polynomial Regression:
# TRAINING ERROR PER DEGREE
train_rmse_errors = []

# TEST ERROR PER DEGREE
test_rmse_errors = []

# Note: Running polynomials up to 10 is often not feasible; (perhaps 5 or 6 might be a max)
for d in range(1,10):
    
    # CREATE POLY DATA SET FOR DEGREE "d"
    polynomial_converter = PolynomialFeatures(
        degree=d, include_bias=False)
    poly_features = polynomial_converter.fit_transform(X)
    
    # SPLIT THIS NEW POLY DATA SET
    X_train, X_test, y_train, y_test = train_test_split(
        poly_features, y
        , test_size=0.3, random_state=27
        )
    
    # TRAIN ON THIS NEW POLY SET
    model = LinearRegression(
        fit_intercept=True)
    model.fit(X_train, y_train)
    
    # PREDICT ON BOTH TRAIN AND TEST
    train_pred = model.predict(X_train)
    test_pred = model.predict(X_test)
    
    # Calculate Errors
    
    # Errors on Train Set
    train_RMSE = np.sqrt(mean_squared_error(y_train,train_pred))
    
    # Errors on Test Set
    test_RMSE = np.sqrt(mean_squared_error(y_test,test_pred))

    # Append errors to lists for plotting later
       
    train_rmse_errors.append(train_RMSE)
    test_rmse_errors.append(test_RMSE)